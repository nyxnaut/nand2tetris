// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS: 
	// Set up to use 1 bit to select between load and increment
	// it doesn't matter that the mux always selects between these and reset
	// because of the registry load bit

	// 1 for inc, 0 for load. Load is selected if both bits are for some odd reason
	// on at the same time. Looking at you clock cycle 9 in the test script...
	Not(in=load, out=nload);
	And(a=nload, b=inc, out=sel0);

	Add16(a=toAdd, b[0]=true, out=addOne);
	Mux4Way16(sel[0]=sel0, sel[1]=reset, a=in, b=addOne,  out=toReg);

	// Register should be loaded if any control bit is 1
	Or(a=load, b=reset, out=or1);
	Or(a=or1, b=inc, out=regLoad);

	Register(in=toReg, load=regLoad, out=out, out=toAdd);
}
