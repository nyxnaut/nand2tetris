// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// Outputs to A, D, & M
	// Each locations conditional load bit is written next to its
	// implementation, with Memory just below A (as A determines its address)
	ALU(x=outD, y=muxAM,
		zx=instruction[11],
		nx=instruction[10],
		zy=instruction[9],
		ny=instruction[8],
		f=instruction[7],
		no=instruction[6], 
		zr=zr, ng=ng,
		out=outALU, out=outM);

	// A Register
	// If A instruction, loads instruction as value. Otherwise if the
	// A register load bit is set in the C instruction, loads ALU output
	// Also provides the memory address for ALU output (to be loaded
	// if the writeM bit is set)
	Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);
	And(a=instruction[15], b=instruction[5], out=cLoadA);
	Not(in=instruction[15], out=aInstruction);
	Or(a=cLoadA, b=aInstruction, out=loadA);
	ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);

	// Write to Memory
	// Writes ALU output to address stored in A if
	// C instruction M load bit is set (see also ALU and A register)
	And(a=instruction[15], b=instruction[3], out=writeM);

	// D Register
	// Load occurs if C instruction with D register bit set
	And(a=instruction[15], b=instruction[4], out=loadD);
	DRegister(in=outALU, load=loadD, out=outD);

	// ALU Mux
	// Defaults to passing A register output into ALU unless it's a
	// c instruction with the a bit set
	And(a=instruction[12], b=instruction[15], out=loadM);
	Mux16(a=outA, b=inM, sel=loadM, out=muxAM);

	// Program Counter
	// Load logic checks all the jump conditions against
	// ALU zr and ng (zero, negative) output bits
	// The pc increments unless there is a jump operation
	Or(a=zr, b=ng, out=nps);
	Not(in=nps, out=ps);
	And(a=instruction[0], b=ps, out=gt);
	And(a=instruction[1], b=zr, out=eq);
	And(a=instruction[2], b=ng, out=lt);
	Or(a=gt, b=eq, out=get);
	Or(a=get, b=lt, out=jmpBit);
	And(a=jmpBit, b=instruction[15], out=loadPC);
	Not(in=loadPC, out=incPC);
	PC(in=outA, inc=incPC, load=loadPC, reset=reset, out[0..14]=pc);
}
